version = "2016.06.21.000";
comments = "";


// Flags for Turbo Text Analysis operations
turbotextanalysis =
{
    //Variables to select modules to load
    load_tagger = false;
    load_parser = false;
    load_morphological_tagger = false;
    load_entity_recognizer = false;
    load_semantic_parser = false;
    load_coreference_resolver = false;    

    //Variables to select modes of execution
    default_use_tagger = false;
    default_use_parser = false;
    default_use_morphological_tagger = false;
    default_use_entity_recognizer = false;
    default_use_semantic_parser = false;
    default_use_coreference_resolver = false;    
};

languages =
(
    {
        language = "en";
		tokenizer_type = "standard"; //standard vs icu
		tokenizer_outputs_unicode_glyph_aware_offsets = false;

        filepath_abbreviations = "english_abbreviations.txt";
        filepath_contractions = "english_contractions.txt";
        filepath_contraction_suffixes = "english_contraction_suffixes.txt";
        
        filepath_lemmas = "english_lemmas.txt";
        
        filepath_tagger_model = "english_proj_tagger.model";
        filepath_morphological_tagger_model = "english_morphological_tagger.model";
        filepath_entity_recognizer_model = "english_entity_recognizer.model";
        filepath_parser_model = "english_parser.model";
        filepath_semantic_parser_model = "english_semantic_parser.model";
        filepath_coreference_resolver_model = "english_coreference_resolver.model";
    },
    {
        language = "es";
		tokenizer_type = "standard";
		tokenizer_outputs_unicode_glyph_aware_offsets = false;

        filepath_abbreviations = "spanish_abbreviations.txt";
        filepath_contractions = "spanish_contractions.txt";
        filepath_contraction_suffixes = "spanish_contraction_suffixes.txt";
        
        filepath_lemmas = "spanish_lemmas.txt";
        
        filepath_tagger_model = "spanish_tagger.model";
        filepath_morphological_tagger_model = "spanish_morphological_tagger.model";
        filepath_entity_recognizer_model = "spanish_entity_recognizer.model";
        filepath_parser_model = "spanish_parser.model";
        filepath_semantic_parser_model = "spanish_semantic_parser.model";
        filepath_coreference_resolver_model = "spanish_coreference_resolver.model";   
    },
    {
        language = "de";
		tokenizer_type = "standard";
		tokenizer_outputs_unicode_glyph_aware_offsets = false;

        filepath_tagger_model = "german_universal_tagger.model";
        filepath_parser_model = "german_universal_parser_pruned-true_model-standard.model"; 
    },
    {
        language = "pt";
		tokenizer_type = "standard";
		tokenizer_outputs_unicode_glyph_aware_offsets = false;
        break_token_on_hyphen = false;
    },
    {
        language = "zh";
		tokenizer_type = "icu";
		tokenizer_outputs_unicode_glyph_aware_offsets = true;
    },
    {
        language = "th";
		tokenizer_type = "icu";
		tokenizer_outputs_unicode_glyph_aware_offsets = true;
    }
);
    
// Flags for google logging
logging =
{
    logging_name = "TurboTextAnalysis";
    
    // Paths for glog logs 
    path_glog_info = "";
    path_glog_warning = "";
    path_glog_error = "";
  
    // Verbose Logging: VLOG
    // Set to -1 to turn all VLOG off.
    // >=0 turns VLOG on. Every VLOG with level <= FLAGS_v will be turned on.
    // (VLOG allways logs at the INFO log level)
    
    FLAGS_v = 0;
    
    // Standard logging.
    // FLAGS_stderrthreshold controls what levels go to stderr.
    // FLAGS_minloglevel controls what levels are turned on.
    // Every LOG with level >= FLAGS_minloglevel will be turned on.
    // (this is the opposite level behaviour in respect to VLOG)
    // INFO=0; WARNING=1; ERROR=2; FATAL=3. 
    // A number greater than those will silence these LOGs.

    FLAGS_stderrthreshold = 0;
    FLAGS_minloglevel = 0;
    
};

